#ifndef L_LETTER_H
#define L_LETTER_H

#include <SDL3/SDL.h>

typedef enum {
	L_COLOR_WHITE = 0,
	L_COLOR_BLACK,
	L_COLOR_RED,
	L_COLOR_GREEN,
	L_COLOR_BLUE,
	L_COLOR_YELLOW,
	L_COLOR_MAGENTA,
	L_COLOR_BACKDROP,
	L_COLOR_MENU_BACKDROP,
	L_COLOR_COUNT
} L_Colors;
extern SDL_Color L_COLORS[L_COLOR_COUNT];

typedef struct {
	const char *text;
	int point_size;
	L_Colors color;
} L_Text_Obj;

typedef enum {
	L_TEXT_BOTTOM_HELP = 0,
	L_TEXT_HELP_0_9,
	L_TEXT_HELP_SHIFT,
	L_TEXT_HELP_CTRL,
	L_TEXT_HELP_E,
	L_TEXT_HELP_S,
	L_TEXT_HELP_W,
	L_TEXT_HELP_N,
	L_TEXT_HELP_C,
	L_TEXT_HELP_H,
	L_TEXT_HELP_G,
	L_TEXT_HELP_RIICHI,
	L_TEXT_HELP_DOUBLE_RIICHI,
	L_TEXT_HELP_IPPATSU,
	L_TEXT_HELP_HAITEI,
	L_TEXT_HELP_CHANKAN,
	L_TEXT_HELP_RINSHAN,
	L_TEXT_HELP_SPACE_TOGGLE,

	L_TEXT_HAND_LABEL_SELECTED,
	L_TEXT_HAND_LABEL,
	L_TEXT_HAND_VALID,
	L_TEXT_HAND_INVALID,
	L_TEXT_DORA_LABEL_SELECTED,
	L_TEXT_DORA_LABEL,

	L_TEXT_DORA_SEAT_WIND,
	L_TEXT_DORA_SEAT_WIND_SELECTED,
	L_TEXT_DORA_PREVELANT_WIND,
	L_TEXT_DORA_PREVELANT_WIND_SELECTED,

	L_TEXT_CONDITION_TSUMO_OFF,
	L_TEXT_CONDITION_TSUMO_ON,
	L_TEXT_CONDITION_RIICHI_OFF,
	L_TEXT_CONDITION_RIICHI_ON,
	L_TEXT_CONDITION_DOUBLE_RIICHI_OFF,
	L_TEXT_CONDITION_DOUBLE_RIICHI_ON,
	L_TEXT_CONDITION_IPPATSU_OFF,
	L_TEXT_CONDITION_IPPATSU_ON,
	L_TEXT_CONDITION_HAITEI_OFF,
	L_TEXT_CONDITION_HAITEI_ON,
	L_TEXT_CONDITION_CHANKAN_OFF,
	L_TEXT_CONDITION_CHANKAN_ON,
	L_TEXT_CONDITION_RINSHAN_OFF,
	L_TEXT_CONDITION_RINSHAN_ON,
	L_TEXT_CONDITION_TENHOU_OFF,
	L_TEXT_CONDITION_TENHOU_ON,

	L_TEXT_GROUP_OPEN,
	L_TEXT_GROUP_CLOSED,

	L_TEXT_HONBA_OFF,
	L_TEXT_HONBA_ON,
	L_TEXT_HONBA_COUNT,

	L_TEXT_COUNT,
} L_Text;

void L_init(SDL_Renderer *sdl_renderer);

// returns false (0) if successful
bool L_draw(SDL_Renderer *sdl_renderer, L_Text text, SDL_Point point);

void L_rewrite_text(SDL_Renderer *sdl_renderer, L_Text text_to_change,
		    char *string_to_replace);

void L_destroy(void);

#endif // !
